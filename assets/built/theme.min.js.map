{"version":3,"sources":["dark-mode-toggle.js","navigation.js","pagination.js","copy-link.js","table-of-contents.js","lightbox.js","enrol-dialog.js"],"names":["darkModeButton","document","querySelector","lightModeButton","storedDataColorTheme","localStorage","getItem","window","matchMedia","matches","updateIconColor","icons","fillColor","getComputedStyle","documentElement","getPropertyValue","trim","forEach","icon","svgDoc","contentDocument","querySelectorAll","element","setAttribute","onClick","event","targetDataColorTheme","getAttribute","commentsScript","setItem","addEventListener","menuIndentRegex","processMenuItems","div1","menuItems","let","submenu","i","length","menuName","sup","div","match","lastElementChild","innerText","replace","classList","add","anchor","createElement","appendChild","createTextNode","p1","ul","replaceChildren","remove","nav","activeSubmenu","clickedItem","target","closest","contains","preventDefault","toggle","containers","share","secondary","sidebar","container","clickedLink","internalTagItems","item","naturalHeight","description","regex","test","textContent","console","log","svgElement","viewBox","naturalWidth","bbox","getBBox","width","height","secondaryLinksItems","span","itemDescription","words","split","firstLetters","slice","map","word","charAt","toUpperCase","join","link","insertBefore","firstChild","isInfinite","callback","currentArticleList","buffer","ticking","loading","lastScrollY","lastWindowHeight","lastDocumentHeight","buttonElement","nextElement","onPageLoad","fragment","elems","resNextElement","this","status","removeEventListener","onScroll","onResize","nextPageArticleList","response","createDocumentFragment","clonedItem","importNode","style","position","visibility","push","href","scrollHeight","imagesLoaded","getBoundingClientRect","bottom","requestTick","onUpdate","xhr","XMLHttpRequest","responseType","open","send","requestAnimationFrame","scrollY","innerHeight","passive","copyLinkElement","getElementById","navigator","clipboard","writeText","location","tooltip","className","setTimeout","tocbot","init","tocSelector","contentSelector","hasInnerContainers","onload","toc","display","offsetHeight","tocButton","tableOfContents","toggleTableOfContents","e","tocOpenElement","tocToggleButton","updateProgress","totalHeight","body","clientHeight","windowHeight","progress","toFixed","setProperty","PhotoSwipeLightbox","arrow","lightbox","arrowPrevSVG","arrowNextSVG","zoom","gallery","children","bgOpacity","closeOnScroll","Xpadding","top","left","right","imageClickAction","tapAction","pswpModule","import","addFilter","itemData","linkEl","w","h","src","srcset","dialog","closeButton","form","close","MutationObserver","mutation","mutations","attributeName","showModal","observe","attributes","attributeFilter"],"mappings":"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","file":"theme.min.js","sourcesContent":["/*\n * toggle between dark and light mode\n * if the user has set a system preference then default to that setting\n * if they specify a setting save it in local storage so it is remembered next time\n * \n*/\n\n(function() {\n    const darkModeButton = document.querySelector(\"button.dark-mode\");\n    const lightModeButton = document.querySelector(\"button.light-mode\");\n\n    if (! darkModeButton || ! lightModeButton) {\n        return;\n    }\n\n    var storedDataColorTheme = localStorage.getItem('data-color-scheme') || (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\");\n\n    if (storedDataColorTheme) {\n        document.documentElement.setAttribute('data-color-scheme', storedDataColorTheme);\n    }\n\n    /* \n     * where an svg icon is loaded externally, e.g in the sidebar, \n     * we have to update the svg paths to reflect the selected color scheme \n     */\n    function updateIconColor() {\n        if (!icons) return;\n\n        const fillColor = getComputedStyle(document.documentElement).getPropertyValue('--icon-color').trim();\n\n        icons.forEach(icon => {\n            const svgDoc = icon.contentDocument;\n            if (!svgDoc) return; \n\n            const elements = svgDoc.querySelectorAll('path, circle, rect, ellipse');\n            \n            elements.forEach(element => {\n                element.setAttribute('fill', fillColor);\n                element.setAttribute('stroke', fillColor);\n            });\n        });\n    }\n\n\n    function onClick(event) {\n        var currentTheme = document.documentElement.getAttribute(\"data-color-scheme\");\n        var targetDataColorTheme = currentTheme == \"dark\" ? \"light\" : \"dark\";\n\n        document.documentElement.setAttribute('data-color-scheme', targetDataColorTheme)\n        localStorage.setItem('data-color-scheme', targetDataColorTheme);\n\n        // set color-scheme on the comments iframe\n        // As of 5.0 Ghost helper supports {{comments mode=\"auto\" }} which will use the background color to determine if the theme is using a dark mode\n        // ... but this only works after a screen refresh.  The code below will make the scheme change on clicking the dark mode toggle\n        const commentsScript = document.querySelector('script[data-color-scheme]');\n        if (commentsScript) {\n            commentsScript.setAttribute('data-color-scheme', targetDataColorTheme);\n        };\n\n        /* update the sidebar icons */\n        updateIconColor();\n    }\n\n    const icons = document.querySelectorAll('.sidebar-link-icon');\n    updateIconColor();\n\n    darkModeButton.addEventListener('click', onClick);\n    lightModeButton.addEventListener('click', onClick);\n\n  })();","/* \n* create the <li> html structure under the <nav> element used in the site-header\n* the items are structured based on markup in the ghost navigation names:\n* names prefixed with - indicate a submenu and -- indicates a submenu item\n* for example\n*\n*  ghost navigation          rendered html\n*  -----------------         ------------------\n*  HOME                      <li class='main-nav-link-item'>\n*                              <a href='http://localhost:2368/'>HOME</a>\n*                            </li>\n*  -HONDA C90                <li class='main-nav-link-item has-submenu'>\n*                                <a href='#'>HONDA C90 ⌄</a>\n*                                <div class='submenu'>\n*                                    <div class='submenu-header'>\n*                                        <p class='submenu-title'>HONDA C90</p>\n*                                    </div>\n*                                    <ul class='submenu-items'>\n*  --introduction                        <li class='submenu-item'>\n*                                            <a href='http://localhost:2368/2019/11/16/honda-c90-introduction/'>introduction</a>\n*                                        </li>\n*  --engine                              <li class='submenu-item'>\n*                                            <a href='http://localhost:2368/tag/engine/'>engine</a>\n*                                        </li>\n*                                    </ul>\n*                                </div>\n*                            </li>\n*/\n\n(function () {\n  const menuIndentRegex = /(^-{1,})(.*)/; // Match the -submenu and --submenu-item navigation entries\n\n  function createSubMenu(menuName) {\n      const div = document.createElement('div');\n      div.classList.add('submenu');\n\n      const div1 = document.createElement('div');\n      div1.classList.add('submenu-header');\n\n      const p1 = document.createElement('p');\n      p1.classList.add('submenu-title');\n      p1.appendChild(document.createTextNode(menuName));\n      div1.appendChild(p1);\n\n      div.appendChild(div1);\n\n      const ul = document.createElement('ul');\n      ul.classList.add('submenu-items');\n\n      div.appendChild(ul);\n\n      return div;\n  }\n\n  function processMenuItems() {\n      const menuItems = document.querySelectorAll('.main-nav-links .main-nav-link-item');\n      let submenu = null;\n\n      for (let i = 0; i < menuItems.length; ++i) {\n          const match = menuItems[i].lastElementChild.innerText.match(menuIndentRegex);\n\n          if (match) {\n              // Remove the submenu & submenu-item indent indicators (- --)\n              menuItems[i].lastElementChild.innerText = menuItems[i].lastElementChild.innerText.replace(menuIndentRegex,'$2').trim();\n              const menuName=menuItems[i].lastElementChild.innerText;\n\n              if (match[1].length == 1) { // Submenu (-)\n                  menuItems[i].classList.add('has-submenu');\n\n                  const anchor = document.createElement('a');\n                  anchor.setAttribute('href', '#');\n                  anchor.classList.add('tabindex=0');\n                  anchor.appendChild(document.createTextNode(menuName));\n          \n                  const sup = document.createElement('sup');\n                  sup.appendChild(document.createTextNode(' ⌄'));\n                  anchor.appendChild(sup);\n\n                  const div = createSubMenu(menuName);\n                  menuItems[i].replaceChildren(anchor);\n                  menuItems[i].appendChild(div);\n                  submenu = menuItems[i];\n              } else if (submenu) { // Submenu item (--)\n                  menuItems[i].classList.add('submenu-item');\n                  menuItems[i].classList.remove('main-nav-link-item');\n                  submenu.querySelector('.submenu-items').appendChild(menuItems[i]);\n              }\n          }\n      }\n      document.querySelector('.main-nav-links-container').classList.add('main-nav-links-ready');\n  }\n\n  processMenuItems();\n})();\n\n/* \n * open/close nav (main) menu and submenus\n * .main-nav-links-container.main-nav-links-active is set when the nav is opened using the hamburger button \n * .submenu.active-submenu is set when an item with a submenu is opened\n*/\n(function() {\n  const nav = document.querySelector('.main-nav-links-container');\n  const navToggle = document.querySelector('.main-nav-links-toggle');\n\n  function handleDocumentClick(event) {\n    let activeSubmenu = nav.querySelector('.active-submenu');\n    let clickedItem;\n\n\n    // when a submenu item is clicked no need to do anythng further (new page will open)\n    if (event.target.closest(\".submenu-item\")) {\n      return;\n    }\n    else if (event.target.closest(\".main-nav-link-item\") && ! event.target.closest(\".submenu-header\")) { // do not count a click on a submenu header as a clicked item\n      clickedItem= event.target.closest(\".main-nav-link-item\");\n    }\n\n    if (clickedItem) {\n      if (clickedItem.classList.contains('has-submenu')) {\n        event.preventDefault(); // prevent the page scrolling to the top when a menu item is clicked;\n      }\n\n      if (activeSubmenu) { // close any previously opened submenu\n        activeSubmenu.classList.remove('active-submenu');\n      }\n\n      if (! clickedItem.contains(activeSubmenu)) { // do not reopen the submenu item if it was closed by the statement above\n        if (clickedItem.classList.contains(\"has-submenu\")) {\n          clickedItem.querySelector(\".submenu\").classList.add('active-submenu');\n        }\n      }\n\n      return;\n    }\n\n    // toggle nav if the hamburger menu is clicked\n    if (event.target.closest('.main-nav-links-toggle')) {\n      nav.classList.toggle('main-nav-links-active');\n      return;\n    }\n\n    // when click is outside of menus, close the latest menu\n    if (activeSubmenu) { // close any previously opened submenu\n      activeSubmenu.classList.remove('active-submenu');\n    }\n    else if (nav.classList.contains('main-nav-links-active')) {\n        nav.classList.remove('main-nav-links-active');\n    }\n  }\n\n  document.addEventListener('click', handleDocumentClick);\n})();\n\n\n/*\n * open/close nav link item menu \n * note the user decides whether to include share or secondary links, so they may be null \n*/\n(function() {\n    const containers = {\n        share: document.querySelector('.share-links-container'),\n        secondary: document.querySelector('.secondary-links-container'),\n        sidebar: document.querySelector('.sidebar')\n    };\n\n    function toggle(container) {\n        container.classList.toggle('display-item-details');\n    }\n\n    document.addEventListener('click', function(event) {\n        const { share, secondary, sidebar } = containers;\n\n        const clickedLink = event.target.closest('a');\n        if (sidebar?.contains(event.target) && clickedLink) {\n            return;\n        }\n\n        if (share?.contains(event.target)) {\n            toggle(share);\n            if (secondary?.classList.contains('display-item-details')) toggle(secondary);\n            if (sidebar?.classList.contains('display-item-details')) toggle(sidebar);\n            return;\n        }\n\n        if (secondary?.contains(event.target)) {\n            toggle(secondary);\n            if (share?.classList.contains('display-item-details')) toggle(share);\n            if (sidebar?.classList.contains('display-item-details')) toggle(sidebar);\n            return;\n        }\n\n        if (sidebar?.contains(event.target)) {\n            toggle(sidebar);\n            if (share?.classList.contains('display-item-details')) toggle(share);\n            if (secondary?.classList.contains('display-item-details')) toggle(secondary);\n            return;\n        }\n\n        /* close open menus when clicking outside */\n        if (share?.classList.contains('display-item-details')) toggle(share);\n        if (secondary?.classList.contains('display-item-details')) toggle(secondary);\n    });\n    /* \n     * remove the secondary nav indicator (e.g ##1-) from internal tag names. The number is optional and there to sort the icons\n     *\n     * make the sidebar icons 20px x 20px:\n     *  the svg element is embeded from the tag's feature_post image into the HTML so that we can dynamically adjut the \n     *  color according to dark mode settings (see dark-mode-toggle.js). \n     *  as a consequence, we can't control the height /width with css and have to do it here instead\n    */\n    const internalTagItems = document.querySelectorAll('.internal-tags .sidebar-link-item');\n    if (internalTagItems) {\n        internalTagItems.forEach(item => {\n            const description  = item.querySelector('.sidebar-link-description');\n            const icon = item.querySelector('.sidebar-link-icon');\n            const regex = /^##[0-9]*-/;  // this is the pattern of internal nag names that are to be used for secondary navigation\n\n            if (description) {\n                if (regex.test(description.textContent)) {\n                    description.textContent = description.textContent.replace(regex,'');\n                } else {\n                    item.remove(); // standard internal tags (these start with a single #) are not used in the navigation\n                }\n            }\n\n            console.log(icon);\n            // if the user has loaded a svg as a featured article it will be held as contentDocument \n            if (icon.contentDocument !== null && icon.contentDocument !== undefined) {\n                const svgDoc = icon.contentDocument;\n                const svgElement = svgDoc.querySelector('svg');\n                if (svgElement) {\n                    const viewBox = svgElement.getAttribute('viewBox');\n                    const naturalWidth = svgElement.getAttribute('width');\n                    const naturalHeight = svgElement.getAttribute('height');\n                    if (!viewBox) {\n                        if (!naturalWidth || !naturalHeight){\n                            const bbox = svgElement.getBBox(); // Returns the bounding box of the element\n                            svgElement.setAttribute('viewBox', `0 0 ${bbox.width} ${bbox.height}`);\n                        } else {\n                            svgElement.setAttribute('viewBox', `0 0 ${naturalWidth} ${naturalHeight}`);\n                        }\n                    }\n                    svgElement.setAttribute('height', '20px');\n                    svgElement.setAttribute('width', '20px');\n                }\n            }\n\n            icon.classList.remove('hidden'); // only show the image after it is resized\n        });\n\n        // for the secondary link items we use the first two characters of the words in the description instead of an icon\n        const secondaryLinksItems = document.querySelectorAll('.secondary-links .sidebar-link-item');\n        if (secondaryLinksItems) {\n            secondaryLinksItems.forEach(item => {\n                const span = document.createElement('span');\n                const itemDescription = item.querySelector('.sidebar-link-description') ;\n                if (itemDescription) {\n                    const words = itemDescription.textContent.replace(/[^a-zA-Z0-9\\s]/g, ' ').trim().split(/\\s+/);\n\n                    let firstLetters = words.slice(0, 2).map(word => word.charAt(0).toUpperCase()).join('');\n\n                    if (words.length === 1) {\n                        firstLetters=(itemDescription.textContent.slice(0, 2)).toUpperCase();\n                    }\n\n                    span.textContent = firstLetters;\n                    span.classList.add('sidebar-link-icon');\n                    const link=item.querySelector('.sidebar-link');\n                    if (link) {\n                        link.insertBefore(span,link.firstChild);\n                    }\n                }\n            });\n        }\n    }\n})();\n","/* pagination */\n(function (isInfinite, callback) {\n    var buttonElement = document.querySelector('.pagination');\n\n    // next link element\n    var nextElement = document.querySelector('link[rel=next]');\n    if (!nextElement && buttonElement) {\n        buttonElement.remove();\n        return;\n    }\n\n    // post list element\n    var currentArticleList = document.querySelector('.paginated');\n    if (!currentArticleList) {\n        return;\n    }\n\n    var buffer = 300;\n\n    var ticking = false;\n    var loading = false;\n\n    var lastScrollY = window.scrollY;\n    var lastWindowHeight = window.innerHeight;\n    var lastDocumentHeight = document.documentElement.scrollHeight;\n\n    function onPageLoad() {\n        if (this.status === 404) {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n            buttonElement.remove();\n            return;\n        }\n\n        // append next page of article-cards\n        // the next elements are organized as per index.hbs\n        var nextPageArticleList = this.response.querySelectorAll('.article-card');\n        var fragment = document.createDocumentFragment();\n        var elems = [];\n        nextPageArticleList.forEach(function (item) {\n            // document.importNode is important, without it the item's owner\n            // document will be different which can break resizing of\n            // `object-fit: cover` images in Safari\n\n            var clonedItem = document.importNode(item, true);\n\n            if (callback) {\n                clonedItem.style.position = 'absolute';\n                clonedItem.style.visibility = 'hidden';\n                elems.push(clonedItem);\n            }\n\n            fragment.appendChild(clonedItem);\n        });\n\n        currentArticleList.appendChild(fragment);\n\n        if (callback) {\n            callback(elems);\n        }\n\n        // set next link\n        var resNextElement = this.response.querySelector('link[rel=next]');\n        if (resNextElement) {\n            nextElement.href = resNextElement.href;\n        } else {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n            if (buttonElement) {\n                buttonElement.remove();\n            }\n        }\n\n        // sync status\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        ticking = false;\n        loading = false;\n\n        if (isInfinite) {\n            imagesLoaded(currentArticleList, function () {\n                if (currentArticleList.getBoundingClientRect().bottom <= lastWindowHeight) {\n                    console.log(currentArticleList.getBoundingClientRect().bottom, lastWindowHeight)\n                    requestTick();\n                }\n            });\n        }\n    }\n\n    function onUpdate() {\n        // return if already loading\n        if (loading) {\n            return;\n        }\n\n        // return if not scroll to the bottom\n        if (isInfinite && lastScrollY + lastWindowHeight <= lastDocumentHeight - buffer) {\n            ticking = false;\n            return;\n        }\n\n        loading = true;\n\n        var xhr = new window.XMLHttpRequest();\n        xhr.responseType = 'document';\n\n        xhr.addEventListener('load', onPageLoad);\n\n        xhr.open('GET', nextElement.href);\n        xhr.send(null);\n    }\n\n    function requestTick() {\n        ticking || window.requestAnimationFrame(onUpdate);\n        ticking = true;\n    }\n\n    function onScroll() {\n        lastScrollY = window.scrollY;\n        requestTick();\n    }\n\n    function onResize() {\n        lastWindowHeight = window.innerHeight;\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        requestTick();\n    }\n\n    if (isInfinite) {\n        window.addEventListener('scroll', onScroll, {passive: true});\n        window.addEventListener('resize', onResize);\n        requestTick();\n    } else {\n        buttonElement.addEventListener('click', requestTick);\n    }\n})(false);\n","/* copy link button (copies link and shows a tooltip)  */\n(function() {\n    const copyLinkElement = document.getElementById(\"copy-link\")  ;\n    if (! copyLinkElement)\n        return;\n\n    function copyLink() {\n        navigator.clipboard.writeText(window.location.href);\n\n        const tooltip = document.createElement('div');\n        tooltip.className = 'tooltip';\n        tooltip.textContent = 'Copied!';\n        copyLinkElement.appendChild(tooltip);\n\n        setTimeout(() => { tooltip.remove(); }, 1000);\n    }\n    copyLinkElement.addEventListener(\"click\", copyLink, false);\n})();","/*\n * table of contents initialistation\n*/\n(function () {\n    tocbot.init({\n    tocSelector: '.toc',\n    contentSelector: '.article',\n    hasInnerContainers: true\n    })\n    \n})();\n\n// safari fix  - toc not showing without a forced repaint - todo - retest\nwindow.onload = function() {\n  const toc = document.querySelector('.table-of-contents');\n  if (toc) {\n      // Force a repaint\n      toc.style.display = 'none';\n      toc.offsetHeight;\n      toc.style.display = 'flex';\n  }\n};\n\n/* \n * toggle mobile toc when toc icon is clicked\n*/\n(function() {\n    const tocButton = document.querySelector(\".toc-toggle\");\n    const tableOfContents = document.querySelector(\".table-of-contents\");\n\n    if (!tableOfContents) {\n      return;\n    }\n  \n    function toggleTableOfContents(){\n        tableOfContents.classList.toggle(\"toc-open\");\n    }\n    if (!tocButton) {\n      return;\n    }\n\n    window.addEventListener('click', function(e){\n      let tocOpenElement = null;\n      tocOpenElement = tableOfContents.querySelector(\".toc-open\");\n\n      if (tocOpenElement && tocOpenElement.contains(e.target)) {\n          return;\n      }\n\n      // Close TOC when clicking outside the TOC\n      if (!tableOfContents.contains(e.target) && !tocButton.contains(e.target) && tableOfContents.classList.contains(\"toc-open\")) {\n          toggleTableOfContents();\n      }\n    });\n  \n    /* Toggle mobile toc */\n    tocButton.addEventListener('click', toggleTableOfContents, false);\n  \n  })();\n\n\n/*\n * update reading progress based on scroll position\n*/\n(function () {\n  const tocToggleButton = document.querySelector('.toc-toggle');\n  if (!tocToggleButton) {\n    return;\n  }\n\n  function updateProgress() {\n    const totalHeight = document.body.clientHeight;\n    const windowHeight = document.documentElement.clientHeight;\n    const position = window.scrollY;\n    const progress = position / (totalHeight - windowHeight)*100;\n    tocToggleButton.setAttribute('data-progress', `${progress.toFixed(0)}%`);\n\n    // this is used to update the circular progress bar show around the toc button\n    tocToggleButton.style.setProperty(\n    '--conic-gradient',\n    `var(--reading-progress-color) 0deg 0%,  \n      var(--reading-progress-color) 0deg ${ progress.toFixed(3) }%,\n      var(--background-color) 0deg ${ 1 - progress.toFixed(3) }%,\n      var(--background-color) 0deg 360deg`,\n    );\n    requestAnimationFrame(updateProgress);\n  }\n  requestAnimationFrame(updateProgress);\n})();\n","\n/* \nas of PhotoSwipe5 the script is imported as an ES module.   This means that this script must be imported into\nthe web page using\n<script type=\"module\" >\n</scipt>\n*/\nimport PhotoSwipeLightbox from './photoswipe-lightbox.esm.min.js';\n(function () {\n  const arrow =  ' <svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 32 30\" width=\"32\" height=\"30\">\\\n    <path d=\"M26.667 14.667v2.667h-16L18 24.667l-1.893 1.893L5.547 16l10.56-10.56L18 7.333l-7.333 7.333h16z\"> \\\n    </path> </svg>';\n\n  const options = {\n    arrowPrevSVG: arrow,\n    arrowNextSVG: arrow,\n    zoom: false,\n    gallery: '.kg-image-card, .kg-gallery-card',\n    children: 'img',\n    bgOpacity: 0.8,\n    closeOnScroll: true,\n    Xpadding: { top: 40, bottom: 40, left: 0, right: 0 },\n    imageClickAction: 'close',\n    tapAction: 'close',\n    pswpModule: () => import('./photoswipe.esm.min.js')\n  };\n\n  const lightbox = new PhotoSwipeLightbox(options);\n\n  lightbox.init();\n\n  /* \n  modify the item data used by photoswipe based on the attributes on the card image.\n  For images without height and width variables (e.g from posts converted from wordpress \n  the attributes are retrieved from the image\n  */\n  lightbox.addFilter('domItemData', (itemData, element, linkEl) => {\n\n    if (itemData) {\n      itemData.w = element.getAttribute(\"width\");\n      itemData.h = element.getAttribute(\"height\");\n      if ( ! itemData.h || ! itemData.w ) {\n        // get the original image size\n        itemData.w = element.naturalWidth;\n        itemData.h = element.naturalHeight;\n      }\n      itemData.src = element.getAttribute(\"src\");\n      itemData.srcset = element.getAttribute(\"srcset\");\n    }\n    return itemData;\n  });\n})();\n","/* this function will open a pop-up window asking the user to check their inbox having enrolled for a newsletter\n* as of 2024/09 this is only required for newsletter registrations.  When using the portal/sign-up feature \n* Ghost automatically opens a similar window\n*/\n(function() {\n    const dialog = document.querySelector(\".enrol-dialog\");\n    const closeButton = document.querySelector(\".enrol-dialog-button\");\n    const form = document.querySelector(\"form.enrol-newsletter\");\n\n    if (dialog && closeButton) {\n        closeButton.addEventListener(\"click\", () => {\n            dialog.close();\n            dialog.style.display = \"none\"; \n        });\n    }\n\n    if (form) {\n        const observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                if (mutation.attributeName === \"class\" && mutation.target.classList.contains(\"success\")) {\n                    dialog.showModal();\n                    dialog.style.display = \"flex\";\n                    break; \n                }\n            }\n        });\n        observer.observe(form, { attributes: true, attributeFilter: [\"class\"] });\n    }\n})();\n\n"]}