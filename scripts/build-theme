#!/usr/bin/env node
import esbuild from 'esbuild';
import browserSync from 'browser-sync';
import { createWriteStream } from 'node:fs';
import { readFile, cp, mkdir } from 'node:fs/promises';
import archiver from 'archiver';
import path from 'node:path';
  
const usage = `Usage: node ${process.argv[1].split('/').pop()}  [OPTIONS]
            Options:
                --build                build files 
                --watch                start a file watcher to rebuild project
                --livereload           start the file watcher and live reload site
                --zip                  create the theme zip file`;

// Build configuration
const buildOptions = {
  entryPoints: [
    'assets/js/main.js',
    'assets/css/main.css'
  ],
  bundle: true,
  minify: true,
  sourcemap: true,
  format: 'esm',
  outdir: 'assets/built',
  platform: 'browser', 
  mainFields: ['browser', 'module', 'main'], 
  conditions: ['browser', 'default', 'module'],
  loader: {
    '.woff2': 'file'
  },
  assetNames: 'fonts/[name]'
}

// live reload configuration
const browserSyncOptions = {
  proxy: 'http://127.0.0.1:2368', 
  files: [
    'assets/built/**',
    '*.hbs',
    'partials/**/*.hbs'
  ],
  port: 3000,
  open: true,
  notify: false,
  ghostMode: false,
  https: false,
  ui: false
}

// zip config
const fontsPath = 'assets/fonts';
const fontsBuiltPath = 'assets/built/fonts';
const zipIncludeList = [
  '*.hbs',
  'assets/built/**/*',
  'partials/**/*',
  'package.json',
  'CONTRIBUTIONS.md',
  'LICENSE',
  'README.md'
]

async function dev() {
  const context = await esbuild.context({
    ...buildOptions,
    plugins: [{
      name: 'rebuild-notify',
      setup(build) {
        build.onEnd(() => {
          console.log(`[${new Date().toLocaleTimeString()}] Rebuild completed`);
        });
      }
    }]
  });

  await context.watch();
}

async function livereload() {
  browserSync.init({
    ...browserSyncOptions
  });
}

async function build() {
  await cp(fontsPath, fontsBuiltPath, { recursive: true })
  await esbuild.build(buildOptions);
  console.log('Build completed');
}

async function zip() {
  const packageJSON = JSON.parse(await readFile('./package.json')); 
  const name = packageJSON.name;
  const distDir = './dist';
  if (!name) throw new Error(`can't read name from package.json`)
  
  const filepath = path.join(process.cwd(), `${distDir}/${name}.zip`);
  const output = createWriteStream(filepath);
  const archive = archiver('zip', { zlib: { level: 9 } });

  // create the dist directory if not already there.
  try {
    await mkdir(distDir);
  } catch (error) {
    if (error.code !== 'EEXIST') {
      throw new Error(`Failed to create directory: ${error.message}`);
    }
  }

  // Return a promise that resolves when zip is complete or rejects on error
  return new Promise((resolve, reject) => {
    output.on('error', error => {
      reject(new Error(`Output stream error: ${error.message}`));
    });

    output.on('close', () => {
      console.log(`zip file created: ${(archive.pointer() / 1024 / 1024).toFixed(2)} MB`);
      resolve();
    });

    archive.pipe(output);

    zipIncludeList.forEach((pattern) => {
      archive.glob(pattern);
    });

    console.log(`Creating ${filepath}`);
    archive.finalize();
  });
}

async function main() {
  try {

    if (process.argv.includes('--watch')) {
      await build();
      await dev();
    } else if (process.argv.includes('--livereload')) {
      await build();
      await dev();
      await livereload();
    } else if (process.argv.includes('--zip')) {
      await zip();
    } else if (process.argv.includes('--build')) {
      await build();
    } else {
      console.log(usage);
      process.exit(1);
    }
  } catch(error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}
main();
